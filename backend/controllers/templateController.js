const templateModel = require('../models/templateModel');
const Feedback = require('../models/feedbackModel');
const { groqGenerateTemplate } = require('../services/groqService');
const injectTemplate = require('../utils/injectTemplate');
const db = require('../db');

// GET ALL TEMPLATES
exports.getAllTemplates = (req, res) => {
  templateModel.getAllTemplates((err, results) => {
    if (err) return res.status(500).json({ message: 'Database error', error: err });
    res.status(200).json(results);
  });
};

// GET TEMPLATE BY ID
exports.getTemplateById = (req, res) => {
  const id = req.params.id;

  templateModel.getTemplateById(id, (err, results) => {
    if (err) return res.status(500).json({ message: 'Database error', error: err });
    if (results.length === 0) return res.status(404).json({ message: 'Template not found' });
    res.status(200).json(results[0]);
  });
};

// CREATE NEW TEMPLATE
exports.createTemplate = (req, res) => {
  const { name, description, html_code } = req.body;

  if (!name || !html_code) {
    return res.status(400).json({ message: 'Name and HTML code are required' });
  }

  templateModel.createTemplate(name, description, html_code, (err, result) => {
    if (err) return res.status(500).json({ message: 'Database error', error: err });
    res.status(201).json({ message: 'Template created', templateId: result.insertId });
  });
};

// UPDATE TEMPLATE
exports.updateTemplate = (req, res) => {
  const id = req.params.id;
  const { name, description, html_code } = req.body;

  templateModel.updateTemplate(id, name, description, html_code, (err) => {
    if (err) return res.status(500).json({ message: 'Database error', error: err });
    res.status(200).json({ message: 'Template updated successfully' });
  });
};

// DELETE TEMPLATE
exports.deleteTemplate = (req, res) => {
  const id = req.params.id;

  templateModel.deleteTemplate(id, (err) => {
    if (err) return res.status(500).json({ message: 'Database error', error: err });
    res.status(200).json({ message: 'Template deleted successfully' });
  });
};

// RENDER TEMPLATE
exports.renderResumeTemplate = async (req, res) => {
  const templateId = req.params.id;
  const resumeId = req.query.resumeId;

  console.log("üîç Rendering template:", templateId, "| Resume ID:", resumeId);

  try {
    const template = await new Promise((resolve, reject) => {
      templateModel.getTemplateById(templateId, (err, result) => {
        if (err) return reject(err);
        resolve(result?.[0] || null);
      });
    });

    if (!template) return res.status(404).json({ message: 'Template not found' });

    let feedbackJson;

    const feedback = await new Promise((resolve, reject) => {
      Feedback.getLatestByResumeId(resumeId, (err, result) => {
        if (err) return reject(err);
        resolve(result);
      });
    });

    if (feedback?.message) {
      feedbackJson = JSON.parse(feedback.message);
    } else {
      const resumeModel = require('../models/resumeModel');
      const resume = await new Promise((resolve, reject) => {
        resumeModel.getResumeById(resumeId, (err, result) => {
          if (err) return reject(err);
          resolve(result?.[0] || null);
        });
      });

      if (!resume) {
        console.warn("‚ö†Ô∏è Resume not found, rendering fallback");
        const renderedHTML = injectTemplate(template.html_code, {});
        return res.status(200).send(renderedHTML);
      }

      try {
        feedbackJson = JSON.parse(resume.content);
      } catch (err) {
        console.error("‚ùå Failed to parse resume JSON:", err);
        return res.status(400).json({ message: 'Invalid resume JSON format' });
      }
    }

    let renderedHTML;
    try {
      renderedHTML = injectTemplate(template.html_code, feedbackJson);
    } catch (err) {
      console.error("‚ùå injectTemplate failed:", err);
      return res.status(500).json({ message: 'Template injection failed', error: err.message });
    }

    return res.status(200).send(renderedHTML);
  } catch (err) {
    console.error("üî• Unexpected server error:", err.stack || err);
    return res.status(500).json({ message: 'Server error', error: err.message });
  }
};

// AI TEMPLATE GENERATION
exports.generateTemplateWithAI = async (req, res) => {
  try {
    const { userPrompt } = req.body;
    if (!userPrompt) return res.status(400).json({ message: 'Prompt is required' });

    const aiResponse = await groqGenerateTemplate(userPrompt);

    let name = aiResponse?.name || 'Untitled Template';
    let description = aiResponse?.description || 'Generated by AI';
    let html_code = aiResponse?.html_code;

    if (!html_code) {
      return res.status(500).json({ message: 'AI returned incomplete data: html_code missing' });
    }

    // Clean the AI output and ensure required placeholders
    html_code = html_code.replace(/<link\s+rel="stylesheet"\s+href="\/styles\.css">/gi, '');

    const requiredPlaceholders = {
      name: '<h1>{{name}}</h1>',
      title: '<h2>{{title}}</h2>',
      summary: '<p>{{summary}}</p>',
      email: '<p><strong>Email:</strong> {{email}}</p>',
      contact: '<p><strong>Phone:</strong> {{contact}}</p>',
      linkedin: '<p><strong>LinkedIn:</strong> {{linkedin}}</p>',
      skills: '<h3>Skills</h3><ul>{{skills}}</ul>',
      certifications: '<h3>Certifications</h3><ul>{{certifications}}</ul>',
      projects: '<h3>Projects</h3><ul>{{projects}}</ul>',
      education: '<h3>Education</h3><ul>{{education}}</ul>',
      experience: '<h3>Experience</h3><ul>{{experience}}</ul>',
      references: '<h3>References</h3><p>{{references}}</p>'
    };

    const introSection = ['name', 'title', 'email', 'contact', 'linkedin']
      .filter(key => !html_code.includes(`{{${key}}}`))
      .map(key => requiredPlaceholders[key])
      .join('\n');

    html_code = introSection + '\n' + html_code;

    Object.entries(requiredPlaceholders).forEach(([key, htmlSnippet]) => {
      if (!html_code.includes(`{{${key}}}`)) {
        html_code += `\n${htmlSnippet}`;
      }
    });

    templateModel.createTemplate(name, description, html_code, (err, result) => {
      if (err) return res.status(500).json({ message: 'DB error', error: err });
      res.status(201).json({ message: 'Template created', templateId: result.insertId });
    });
  } catch (err) {
    console.error('‚ùå Failed to generate template:', err.stack || err);
    res.status(500).json({ message: 'AI template generation failed', error: err.message });
  }
};
